import twilio from 'twilio';
import fetch from 'node-fetch';
import { CronJob } from 'cron';
import logger from './logger.js';

// üîß WhatsApp Service Configuration
const TWILIO_ACCOUNT_SID = process.env.TWILIO_ACCOUNT_SID;
const TWILIO_AUTH_TOKEN = process.env.TWILIO_AUTH_TOKEN;
const TWILIO_WHATSAPP_FROM = process.env.TWILIO_WHATSAPP_FROM || 'whatsapp:+14155238886';

// Alternative WhatsApp Business API
const WHATSAPP_API_URL = process.env.WHATSAPP_API_URL;
const WHATSAPP_API_TOKEN = process.env.WHATSAPP_API_TOKEN;

// Daily report settings
const DAILY_REPORT_TIME = process.env.DAILY_REPORT_TIME || '20:00';
const DAILY_REPORT_TIMEZONE = process.env.DAILY_REPORT_TIMEZONE || 'Asia/Jerusalem';

let twilioClient = null;

// Initialize Twilio client
function initTwilio() {
  if (TWILIO_ACCOUNT_SID && TWILIO_AUTH_TOKEN) {
    twilioClient = twilio(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN);
    console.log('‚úÖ Twilio WhatsApp service initialized');
    return true;
  }
  console.log('‚ö†Ô∏è Twilio credentials not found, using alternative method');
  return false;
}

// üì± Format phone number for WhatsApp
function formatPhoneForWhatsApp(phone) {
  // Remove all non-digits
  let cleanPhone = phone.replace(/\D/g, '');
  
  // If starts with 0, replace with 972 (Israel country code)
  if (cleanPhone.startsWith('0')) {
    cleanPhone = '972' + cleanPhone.substring(1);
  }
  
  // If doesn't start with country code, add 972
  if (!cleanPhone.startsWith('972')) {
    cleanPhone = '972' + cleanPhone;
  }
  
  return `whatsapp:+${cleanPhone}`;
}

// üöÄ Send WhatsApp message via Twilio
async function sendViaTwilio(to, message) {
  try {
    if (!twilioClient) {
      throw new Error('Twilio client not initialized');
    }

    const result = await twilioClient.messages.create({
      body: message,
      from: TWILIO_WHATSAPP_FROM,
      to: formatPhoneForWhatsApp(to)
    });

    logger.whatsappSent(to, 'twilio', result.sid);
    return { success: true, messageId: result.sid, service: 'twilio' };
  } catch (error) {
    logger.whatsappFailed(to, 'twilio', error);
    return { success: false, error: error.message, service: 'twilio' };
  }
}

// üåê Send WhatsApp message via Business API
async function sendViaBusinessAPI(to, message) {
  try {
    if (!WHATSAPP_API_URL || !WHATSAPP_API_TOKEN) {
      throw new Error('WhatsApp Business API credentials not configured');
    }

    const response = await fetch(WHATSAPP_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${WHATSAPP_API_TOKEN}`
      },
      body: JSON.stringify({
        messaging_product: 'whatsapp',
        to: formatPhoneForWhatsApp(to).replace('whatsapp:+', ''),
        type: 'text',
        text: {
          body: message
        }
      })
    });

    const result = await response.json();
    
    if (response.ok) {
      logger.whatsappSent(to, 'business-api', result.messages?.[0]?.id);
      return { success: true, messageId: result.messages?.[0]?.id, service: 'business-api' };
    } else {
      throw new Error(result.error?.message || 'Business API error');
    }
  } catch (error) {
    logger.whatsappFailed(to, 'business-api', error);
    return { success: false, error: error.message, service: 'business-api' };
  }
}

// üì≤ Main function to send WhatsApp message
export async function sendWhatsAppMessage(phone, message) {
  console.log(`üì± Sending WhatsApp to ${phone}: ${message.substring(0, 50)}...`);
  
  // Try Twilio first
  if (twilioClient) {
    const result = await sendViaTwilio(phone, message);
    if (result.success) {
      return result;
    }
  }
  
  // Fallback to Business API
  if (WHATSAPP_API_URL && WHATSAPP_API_TOKEN) {
    const result = await sendViaBusinessAPI(phone, message);
    if (result.success) {
      return result;
    }
  }
  
  // If both fail, log the message (for development/testing)
  console.log('üìù WhatsApp message (not sent - no service available):');
  console.log(`To: ${phone}`);
  console.log(`Message: ${message}`);
  console.log('---');
  
  return { 
    success: false, 
    error: 'No WhatsApp service available',
    service: 'none',
    phone,
    message 
  };
}

// üìä Generate daily report message
export function generateDailyReportMessage(agent, todayVisits, todayCommissions) {
  const today = new Date().toLocaleDateString('he-IL');
  
  return `üî• ◊¢◊ì◊õ◊ï◊ü ◊ô◊ï◊û◊ô - ${today}

◊©◊ú◊ï◊ù ${agent.full_name}! üëã

üìà ◊î◊°◊ò◊ò◊ô◊°◊ò◊ô◊ß◊ï◊™ ◊©◊ú◊ö ◊î◊ô◊ï◊ù:
üë• ◊ë◊ô◊ß◊ï◊®◊ô◊ù ◊ó◊ì◊©◊ô◊ù: ${todayVisits}
üîó ◊ì◊®◊ö ◊î◊ú◊ô◊†◊ß ◊©◊ú◊ö: ${process.env.SITE_URL || '◊î◊ê◊™◊®'}/vc/?ref=${agent.referral_code}
üí∞ ◊¢◊û◊ú◊ï◊™ ◊©◊¶◊ë◊®◊™ ◊î◊ô◊ï◊ù: ‚Ç™${todayCommissions.toFixed(2)}
üìä ◊°◊î"◊õ ◊¢◊û◊ú◊ï◊™: ‚Ç™${(agent.totalCommissions || 0).toFixed(2)}

${todayVisits > 0 ? '◊î◊û◊©◊ö ◊õ◊ö! üí™' : '◊ë◊ï◊ê◊ï ◊†◊¢◊ë◊ï◊ì ◊ß◊¶◊™ ◊ô◊ï◊™◊® ◊û◊ó◊®! üöÄ'}

◊ë◊î◊¶◊ú◊ó◊î,
◊¶◊ï◊ï◊™ ◊î◊û◊õ◊ô◊®◊ï◊™ üéØ`;
}

// üéâ Generate sale notification message
export function generateSaleNotificationMessage(agent, saleAmount, commission, referralCode) {
  const now = new Date().toLocaleString('he-IL');
  
  return `üéâ ◊û◊ñ◊ú ◊ò◊ï◊ë! ◊ô◊© ◊ú◊ö ◊û◊õ◊ô◊®◊î ◊ó◊ì◊©◊î!

üí∞ ◊°◊õ◊ï◊ù ◊î◊®◊õ◊ô◊©◊î: ‚Ç™${saleAmount.toFixed(2)}
ü§ë ◊î◊¢◊û◊ú◊î ◊©◊ú◊ö: ‚Ç™${commission.toFixed(2)} (${(commission/saleAmount*100).toFixed(1)}%)
üìÖ ◊™◊ê◊®◊ô◊ö ◊ï◊©◊¢◊î: ${now}
üîó ◊ì◊®◊ö ◊î◊ß◊ï◊ì ◊©◊ú◊ö: ${referralCode}

üìä ◊°◊ò◊ò◊ô◊°◊ò◊ô◊ß◊ï◊™ ◊û◊¢◊ï◊ì◊õ◊†◊ï◊™:
üíµ ◊°◊î"◊õ ◊¢◊û◊ú◊ï◊™: ‚Ç™${(agent.totalCommissions || 0).toFixed(2)}
üìà ◊°◊î"◊õ ◊û◊õ◊ô◊®◊ï◊™: ${agent.sales || 0}

◊õ◊ú ◊î◊õ◊ë◊ï◊ì! ◊î◊û◊©◊ö ◊õ◊ö! üöÄüî•

◊¶◊ï◊ï◊™ ◊î◊û◊õ◊ô◊®◊ï◊™ üéØ`;
}

// üéâ Generate welcome message for new agent
export function generateWelcomeMessage(agent) {
  const loginUrl = process.env.NODE_ENV === 'production' 
    ? 'https://agent-system-2.onrender.com/agent-login.html'
    : 'http://localhost:10000/agent-login.html';
    
  const salesUrl = process.env.NODE_ENV === 'production'
    ? `https://agent-system-2.onrender.com/vc/?ref=${agent.referral_code}`
    : `http://localhost:10000/vc/?ref=${agent.referral_code}`;

  return `üéâ ◊ë◊®◊ï◊ö ◊î◊ë◊ê ◊ú◊û◊¢◊®◊õ◊™ ◊î◊°◊ï◊õ◊†◊ô◊ù! 

◊©◊ú◊ï◊ù ${agent.full_name}! üëã

üéØ ◊î◊î◊®◊©◊û◊î ◊©◊ú◊ö ◊î◊ï◊©◊ú◊û◊î ◊ë◊î◊¶◊ú◊ó◊î!

üìã ◊§◊®◊ò◊ô ◊î◊ó◊©◊ë◊ï◊ü ◊©◊ú◊ö:
üë§ ◊©◊ù: ${agent.full_name}
üìß ◊û◊ô◊ô◊ú: ${agent.email}
üîó ◊ß◊ï◊ì ◊î◊§◊†◊ô◊î: ${agent.referral_code}

üöÄ ◊ê◊ô◊ö ◊ú◊î◊™◊ó◊ô◊ú:
1Ô∏è‚É£ ◊î◊ô◊õ◊†◊° ◊ú◊ì◊©◊ë◊ï◊®◊ì ◊©◊ú◊ö: ${loginUrl}
2Ô∏è‚É£ ◊©◊™◊£ ◊ê◊™ ◊ß◊ô◊©◊ï◊® ◊î◊û◊õ◊ô◊®◊ï◊™ ◊©◊ú◊ö: ${salesUrl}
3Ô∏è‚É£ ◊ß◊ë◊ú 10% ◊¢◊û◊ú◊î ◊û◊õ◊ú ◊û◊õ◊ô◊®◊î!

üí° ◊ò◊ô◊§◊ô◊ù ◊ú◊î◊¶◊ú◊ó◊î:
‚Ä¢ ◊©◊™◊£ ◊ê◊™ ◊î◊ß◊ô◊©◊ï◊® ◊ë◊®◊©◊™◊ï◊™ ◊î◊ó◊ë◊®◊™◊ô◊ï◊™
‚Ä¢ ◊°◊§◊® ◊ú◊ó◊ë◊®◊ô◊ù ◊ï◊û◊©◊§◊ó◊î ◊¢◊ú ◊î◊û◊ï◊¶◊®
‚Ä¢ ◊î◊©◊™◊û◊© ◊ë◊õ◊§◊™◊ï◊®◊ô ◊î◊©◊ô◊™◊ï◊£ ◊ë◊ì◊©◊ë◊ï◊®◊ì

üì± ◊™◊û◊ô◊õ◊î: ◊ê◊ù ◊ô◊© ◊©◊ê◊ú◊ï◊™, ◊§◊†◊î ◊ê◊ú◊ô◊†◊ï ◊ë◊õ◊ú ◊¢◊™!

◊ë◊î◊¶◊ú◊ó◊î! üöÄüí∞

◊¶◊ï◊ï◊™ ◊û◊¢◊®◊õ◊™ ◊î◊°◊ï◊õ◊†◊ô◊ù üéØ`;
}

// üìÖ Send daily reports to all active agents
export async function sendDailyReports(agents, getAgentTodayStats) {
  console.log('üìä Starting daily reports...');
  
  const activeAgents = agents.filter(agent => agent.is_active && agent.phone);
  
  if (activeAgents.length === 0) {
    console.log('‚ö†Ô∏è No active agents with phone numbers found');
    return;
  }
  
  const results = [];
  
  for (const agent of activeAgents) {
    try {
      // Get today's statistics for this agent
      const todayStats = getAgentTodayStats(agent.id);
      
      // Generate message
      const message = generateDailyReportMessage(
        agent, 
        todayStats.visits, 
        todayStats.commissions
      );
      
      // Send WhatsApp message
      const result = await sendWhatsAppMessage(agent.phone, message);
      
      results.push({
        agent: agent.full_name,
        phone: agent.phone,
        success: result.success,
        service: result.service,
        error: result.error
      });
      
      // Add delay between messages to avoid rate limiting
      await new Promise(resolve => setTimeout(resolve, 1000));
      
    } catch (error) {
      console.error(`‚ùå Error sending daily report to ${agent.full_name}:`, error);
      results.push({
        agent: agent.full_name,
        phone: agent.phone,
        success: false,
        error: error.message
      });
    }
  }
  
  console.log('üìä Daily reports completed:', results);
  return results;
}

// üïê Setup daily report cron job
export function setupDailyReportCron(agents, getAgentTodayStats) {
  // Parse time (format: "HH:MM")
  const [hour, minute] = DAILY_REPORT_TIME.split(':').map(Number);
  
  // Create cron pattern: "minute hour * * *" (every day at specified time)
  const cronPattern = `${minute} ${hour} * * *`;
  
  console.log(`‚è∞ Setting up daily reports cron job: ${cronPattern} (${DAILY_REPORT_TIMEZONE})`);
  
  const job = new CronJob(
    cronPattern,
    () => {
      console.log('‚è∞ Daily report cron job triggered');
      sendDailyReports(agents, getAgentTodayStats);
    },
    null,
    true, // Start immediately
    DAILY_REPORT_TIMEZONE
  );
  
  console.log(`‚úÖ Daily reports scheduled for ${DAILY_REPORT_TIME} (${DAILY_REPORT_TIMEZONE})`);
  return job;
}

// üöÄ Initialize WhatsApp service
export function initWhatsAppService() {
  console.log('üöÄ Initializing WhatsApp service...');
  
  const twilioInitialized = initTwilio();
  const businessAPIConfigured = !!(WHATSAPP_API_URL && WHATSAPP_API_TOKEN);
  
  if (!twilioInitialized && !businessAPIConfigured) {
    console.log('‚ö†Ô∏è No WhatsApp service configured. Messages will be logged only.');
    console.log('üí° To enable WhatsApp notifications:');
    console.log('   1. Set up Twilio: TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN');
    console.log('   2. Or set up Business API: WHATSAPP_API_URL, WHATSAPP_API_TOKEN');
  }
  
  return {
    twilio: twilioInitialized,
    businessAPI: businessAPIConfigured,
    available: twilioInitialized || businessAPIConfigured
  };
}

// Export service status
export function getWhatsAppServiceStatus() {
  return {
    twilio: {
      configured: !!(TWILIO_ACCOUNT_SID && TWILIO_AUTH_TOKEN),
      client: !!twilioClient
    },
    businessAPI: {
      configured: !!(WHATSAPP_API_URL && WHATSAPP_API_TOKEN)
    },
    dailyReports: {
      time: DAILY_REPORT_TIME,
      timezone: DAILY_REPORT_TIMEZONE
    }
  };
}
